from django.contrib.auth.models import User
from django.db import models, IntegrityError
from django.utils.text import slugify
from django.core.exceptions import ValidationError
from cloudinary.models import CloudinaryField
from products.models import Product, Cake

   
class Order(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="comments", default=1)
    customer = models.ForeignKey("Customer",on_delete=models.CASCADE, blank=True, null=True, related_name="orders")
    quantity = models.PositiveIntegerField()
    inscription = models.CharField(max_length=255, default="No inscription")
    price = models.DecimalField(max_digits=10, decimal_places=2, editable=False)
    ordered_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=[
            ("pending", "Pending"),
            ("shipped", "Shipped"),
            ("delivered", "Delivered"),
        ],
        default="pending",
    )
    delivery_time = models.DateTimeField()
    delivery_address = models.CharField(max_length=255, blank=True, null=True)  # New field for custom delivery address

    def save(self, *args, **kwargs):
        self.price = self.product.price * self.quantity
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Order of {self.product.name} (x{self.quantity})"


class Customer(models.Model):
    user = models.OneToOneField("auth.User", on_delete=models.CASCADE)
    address = models.CharField(max_length=255)
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)

    def __str__(self):
        return self.user.username

    @property
    def previous_orders(self):
        return self.orders.all()  # Related_name 'orders' in Order model


class Comment(models.Model):
    customer = models.ForeignKey("Customer",on_delete=models.CASCADE, blank=True, null=True, related_name="comments")  # Use Customer here
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="comments", default=1)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Comment by {self.customer.user.username} on {self.product.name}"


class Rating(models.Model):
    customer = models.ForeignKey("Customer",on_delete=models.CASCADE, blank=True, null=True, related_name="ratings")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="comments", default=1)
    rating = models.PositiveIntegerField(default=1)

    def save(self, *args, **kwargs):
        if not (1 <= self.rating <= 5):
            raise ValidationError("Rating must be between 1 and 5")
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Rating {self.rating} by {self.customer.user.username} for {self.product.name}"
